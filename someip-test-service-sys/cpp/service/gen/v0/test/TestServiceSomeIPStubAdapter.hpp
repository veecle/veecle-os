/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_TEST_TEST_SERVICE_SOMEIP_STUB_ADAPTER_HPP_
#define V0_TEST_TEST_SERVICE_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/test/TestServiceStub.hpp>
#include <v0/test/TestServiceSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

template <typename _Stub = ::v0::test::TestServiceStub, typename... _Stubs>
class TestServiceSomeIPStubAdapterInternal
    : public virtual TestServiceStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< TestServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TestServiceSomeIPStubAdapterHelper;

    ~TestServiceSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TestServiceSomeIPStubAdapterHelper::deinit();
    }

    void deactivateManagedInstances() {}

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::test::TestServiceStub,
        CommonAPI::Version
    > getTestServiceInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< bool>,
        std::tuple< bool>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< CommonAPI::EmptyDeployment>
    > test_boolStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< int8_t>,
        std::tuple< int8_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int8_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int8_t>>
    > test_int8StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< int16_t>,
        std::tuple< int16_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int16_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int16_t>>
    > test_int16StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< int32_t>,
        std::tuple< int32_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>>
    > test_int32StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< int64_t>,
        std::tuple< int64_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int64_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int64_t>>
    > test_int64StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< uint8_t>,
        std::tuple< uint8_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>
    > test_uint8StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< uint16_t>,
        std::tuple< uint16_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint16_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint16_t>>
    > test_uint16StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< uint32_t>,
        std::tuple< uint32_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
    > test_uint32StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< uint64_t>,
        std::tuple< uint64_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint64_t>>
    > test_uint64StubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< double>,
        std::tuple< double>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< CommonAPI::EmptyDeployment>
    > test_doubleStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< float>,
        std::tuple< float>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< CommonAPI::EmptyDeployment>
    > test_floatStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf16le_dynamic_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf16be_dynamic_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf8_dynamic_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf16le_fixed_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf16be_fixed_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > test_utf8_fixed_length_stringStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< TestService::AllPrimitiveDataTypes>,
        std::tuple< TestService::AllPrimitiveDataTypes>,
        std::tuple< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t>,
        std::tuple< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t>
    > test_structStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>
    > test_fixed_length_arrayStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>
    > test_dynamic_length_1_byte_arrayStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>
    > test_dynamic_length_2_bytes_arrayStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< std::vector< uint32_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >>
    > test_dynamic_length_4_bytes_arrayStubDispatcher;

    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v0::test::TestServiceStub,
        std::tuple< uint64_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint64_t>>
    > test_fire_and_forget_uint64StubDispatcher;

    TestServiceSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TestServiceSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TestServiceStub>(_stub)),
        getTestServiceInterfaceVersionStubDispatcher(&TestServiceStub::lockInterfaceVersionAttribute, &TestServiceStub::getInterfaceVersion, false, true),
        test_boolStubDispatcher(
            &TestServiceStub::test_bool,
            false,
            _stub->hasElement(0),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))

        ,
        test_int8StubDispatcher(
            &TestServiceStub::test_int8,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr)))

        ,
        test_int16StubDispatcher(
            &TestServiceStub::test_int16,
            false,
            _stub->hasElement(2),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr)))

        ,
        test_int32StubDispatcher(
            &TestServiceStub::test_int32,
            false,
            _stub->hasElement(3),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)))

        ,
        test_int64StubDispatcher(
            &TestServiceStub::test_int64,
            false,
            _stub->hasElement(4),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)))

        ,
        test_uint8StubDispatcher(
            &TestServiceStub::test_uint8,
            false,
            _stub->hasElement(5),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)))

        ,
        test_uint16StubDispatcher(
            &TestServiceStub::test_uint16,
            false,
            _stub->hasElement(6),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)))

        ,
        test_uint32StubDispatcher(
            &TestServiceStub::test_uint32,
            false,
            _stub->hasElement(7),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)))

        ,
        test_uint64StubDispatcher(
            &TestServiceStub::test_uint64,
            false,
            _stub->hasElement(8),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)))

        ,
        test_doubleStubDispatcher(
            &TestServiceStub::test_double,
            false,
            _stub->hasElement(9),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))

        ,
        test_floatStubDispatcher(
            &TestServiceStub::test_float,
            false,
            _stub->hasElement(10),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))

        ,
        test_utf16le_dynamic_length_stringStubDispatcher(
            &TestServiceStub::test_utf16le_dynamic_length_string,
            false,
            _stub->hasElement(11),
            std::make_tuple(&::v0::test::TestService_::test_utf16le_dynamic_length_string_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_utf16le_dynamic_length_string_revalDeployment))

        ,
        test_utf16be_dynamic_length_stringStubDispatcher(
            &TestServiceStub::test_utf16be_dynamic_length_string,
            false,
            _stub->hasElement(12),
            std::make_tuple(&::v0::test::TestService_::test_utf16be_dynamic_length_string_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_utf16be_dynamic_length_string_revalDeployment))

        ,
        test_utf8_dynamic_length_stringStubDispatcher(
            &TestServiceStub::test_utf8_dynamic_length_string,
            false,
            _stub->hasElement(13),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))

        ,
        test_utf16le_fixed_length_stringStubDispatcher(
            &TestServiceStub::test_utf16le_fixed_length_string,
            false,
            _stub->hasElement(14),
            std::make_tuple(&::v0::test::TestService_::test_utf16le_fixed_length_string_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_utf16le_fixed_length_string_revalDeployment))

        ,
        test_utf16be_fixed_length_stringStubDispatcher(
            &TestServiceStub::test_utf16be_fixed_length_string,
            false,
            _stub->hasElement(15),
            std::make_tuple(&::v0::test::TestService_::test_utf16be_fixed_length_string_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_utf16be_fixed_length_string_revalDeployment))

        ,
        test_utf8_fixed_length_stringStubDispatcher(
            &TestServiceStub::test_utf8_fixed_length_string,
            false,
            _stub->hasElement(16),
            std::make_tuple(&::v0::test::TestService_::test_utf8_fixed_length_string_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_utf8_fixed_length_string_revalDeployment))

        ,
        test_structStubDispatcher(
            &TestServiceStub::test_struct,
            false,
            _stub->hasElement(17),
            std::make_tuple(static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr)),
            std::make_tuple(static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr)))

        ,
        test_fixed_length_arrayStubDispatcher(
            &TestServiceStub::test_fixed_length_array,
            false,
            _stub->hasElement(18),
            std::make_tuple(&::v0::test::TestService_::test_fixed_length_array_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_fixed_length_array_revalDeployment))

        ,
        test_dynamic_length_1_byte_arrayStubDispatcher(
            &TestServiceStub::test_dynamic_length_1_byte_array,
            false,
            _stub->hasElement(19),
            std::make_tuple(&::v0::test::TestService_::test_dynamic_length_1_byte_array_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_dynamic_length_1_byte_array_revalDeployment))

        ,
        test_dynamic_length_2_bytes_arrayStubDispatcher(
            &TestServiceStub::test_dynamic_length_2_bytes_array,
            false,
            _stub->hasElement(20),
            std::make_tuple(&::v0::test::TestService_::test_dynamic_length_2_bytes_array_paramDeployment),
            std::make_tuple(&::v0::test::TestService_::test_dynamic_length_2_bytes_array_revalDeployment))

        ,
        test_dynamic_length_4_bytes_arrayStubDispatcher(
            &TestServiceStub::test_dynamic_length_4_bytes_array,
            false,
            _stub->hasElement(21),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr)))

        ,
        test_fire_and_forget_uint64StubDispatcher(
            &TestServiceStub::test_fire_and_forget_uint64,
            false,
            _stub->hasElement(22),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)))

    {
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1a6) }, &test_boolStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1a7) }, &test_int8StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1a8) }, &test_int16StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1a9) }, &test_int32StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1aa) }, &test_int64StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1ab) }, &test_uint8StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1ac) }, &test_uint16StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1ad) }, &test_uint32StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1ae) }, &test_uint64StubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1af) }, &test_doubleStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b0) }, &test_floatStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b2) }, &test_utf16le_dynamic_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b3) }, &test_utf16be_dynamic_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b4) }, &test_utf8_dynamic_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b5) }, &test_utf16le_fixed_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b6) }, &test_utf16be_fixed_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b7) }, &test_utf8_fixed_length_stringStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b1) }, &test_structStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b9) }, &test_fixed_length_arrayStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1ba) }, &test_dynamic_length_1_byte_arrayStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1bb) }, &test_dynamic_length_2_bytes_arrayStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1bc) }, &test_dynamic_length_4_bytes_arrayStubDispatcher );
        TestServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b8) }, &test_fire_and_forget_uint64StubDispatcher );
        // Provided events/fields
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};


template <typename _Stub, typename... _Stubs>
void TestServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void TestServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::test::TestServiceStub, typename... _Stubs>
class TestServiceSomeIPStubAdapter
    : public TestServiceSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    TestServiceSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TestServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace test
} // namespace v0

#endif // V0_TEST_Test_Service_SOMEIP_STUB_ADAPTER_HPP_
