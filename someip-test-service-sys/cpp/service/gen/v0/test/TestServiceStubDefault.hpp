/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TEST_Test_Service_STUB_DEFAULT_HPP_
#define V0_TEST_Test_Service_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/test/TestServiceStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace test {

/**
 * Provides a default implementation for TestServiceStubRemoteEvent and
 * TestServiceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT TestServiceStubDefault
    : public virtual TestServiceStub {
public:
    COMMONAPI_EXPORT TestServiceStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(TestService::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT TestServiceStubRemoteEvent* initStubAdapter(const std::shared_ptr< TestServiceStubAdapter> &_adapter) {
        CommonAPI::Stub<TestServiceStubAdapter, TestServiceStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual void test_bool(const std::shared_ptr<CommonAPI::ClientId> _client, bool _flag, test_boolReply_t _reply) {
        (void)_client;
        (void)_flag;
        bool retflag = false;
        _reply(retflag);
    }
    COMMONAPI_EXPORT virtual void test_int8(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _param, test_int8Reply_t _reply) {
        (void)_client;
        (void)_param;
        int8_t retcode = 0;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_int16(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _param, test_int16Reply_t _reply) {
        (void)_client;
        (void)_param;
        int16_t retcode = 0;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_int32(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _param, test_int32Reply_t _reply) {
        (void)_client;
        (void)_param;
        int32_t retcode = 0;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_int64(const std::shared_ptr<CommonAPI::ClientId> _client, int64_t _param, test_int64Reply_t _reply) {
        (void)_client;
        (void)_param;
        int64_t retcode = 0;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_uint8(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _param, test_uint8Reply_t _reply) {
        (void)_client;
        (void)_param;
        uint8_t retcode = 0u;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_uint16(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _param, test_uint16Reply_t _reply) {
        (void)_client;
        (void)_param;
        uint16_t retcode = 0u;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_uint32(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param, test_uint32Reply_t _reply) {
        (void)_client;
        (void)_param;
        uint32_t retcode = 0ul;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_uint64(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param, test_uint64Reply_t _reply) {
        (void)_client;
        (void)_param;
        uint64_t retcode = 0ull;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_double(const std::shared_ptr<CommonAPI::ClientId> _client, double _param, test_doubleReply_t _reply) {
        (void)_client;
        (void)_param;
        double retcode = 0.0;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_float(const std::shared_ptr<CommonAPI::ClientId> _client, float _param, test_floatReply_t _reply) {
        (void)_client;
        (void)_param;
        float retcode = 0.0f;
        _reply(retcode);
    }
    COMMONAPI_EXPORT virtual void test_utf16le_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16le_dynamic_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_utf16be_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16be_dynamic_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_utf8_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf8_dynamic_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_utf16le_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16le_fixed_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_utf16be_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16be_fixed_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_utf8_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf8_fixed_length_stringReply_t _reply) {
        (void)_client;
        (void)_param;
        std::string reval = "";
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_struct(const std::shared_ptr<CommonAPI::ClientId> _client, TestService::AllPrimitiveDataTypes _request, test_structReply_t _reply) {
        (void)_client;
        (void)_request;
        TestService::AllPrimitiveDataTypes response = {};
        _reply(response);
    }
    COMMONAPI_EXPORT virtual void test_fixed_length_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_fixed_length_arrayReply_t _reply) {
        (void)_client;
        (void)_param;
        std::vector< uint32_t > reval = {};
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_dynamic_length_1_byte_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_1_byte_arrayReply_t _reply) {
        (void)_client;
        (void)_param;
        std::vector< uint32_t > reval = {};
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_dynamic_length_2_bytes_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_2_bytes_arrayReply_t _reply) {
        (void)_client;
        (void)_param;
        std::vector< uint32_t > reval = {};
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_dynamic_length_4_bytes_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_4_bytes_arrayReply_t _reply) {
        (void)_client;
        (void)_param;
        std::vector< uint32_t > reval = {};
        _reply(reval);
    }
    COMMONAPI_EXPORT virtual void test_fire_and_forget_uint64(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param) {
        (void)_client;
        (void)_param;
    }


protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual TestServiceStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(TestServiceStubDefault *_defaultStub)
            :
              defaultStub_(_defaultStub) {
        }


    private:
        TestServiceStubDefault *defaultStub_;
    };
protected:
    TestServiceStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace test
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_TEST_Test_Service_STUB_DEFAULT
