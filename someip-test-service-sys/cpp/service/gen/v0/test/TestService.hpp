/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TEST_TEST_SERVICE_HPP_
#define V0_TEST_TEST_SERVICE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

class TestService {
public:
    virtual ~TestService() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct AllPrimitiveDataTypes : CommonAPI::Struct< std::string, bool, int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t, double, float> {

        AllPrimitiveDataTypes()
        {
            std::get< 0>(values_) = "";
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = 0;
            std::get< 3>(values_) = 0;
            std::get< 4>(values_) = 0;
            std::get< 5>(values_) = 0;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0u;
            std::get< 8>(values_) = 0ul;
            std::get< 9>(values_) = 0ull;
            std::get< 10>(values_) = 0.0;
            std::get< 11>(values_) = 0.0f;
        }
        AllPrimitiveDataTypes(const std::string &_param_1, const bool &_param_2, const int8_t &_param_3, const int16_t &_param_4, const int32_t &_param_5, const int64_t &_param_6, const uint8_t &_param_7, const uint16_t &_param_8, const uint32_t &_param_9, const uint64_t &_param_10, const double &_param_11, const float &_param_12)
        {
            std::get< 0>(values_) = _param_1;
            std::get< 1>(values_) = _param_2;
            std::get< 2>(values_) = _param_3;
            std::get< 3>(values_) = _param_4;
            std::get< 4>(values_) = _param_5;
            std::get< 5>(values_) = _param_6;
            std::get< 6>(values_) = _param_7;
            std::get< 7>(values_) = _param_8;
            std::get< 8>(values_) = _param_9;
            std::get< 9>(values_) = _param_10;
            std::get< 10>(values_) = _param_11;
            std::get< 11>(values_) = _param_12;
        }
        inline const std::string &getParam_1() const { return std::get< 0>(values_); }
        inline void setParam_1(const std::string &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getParam_2() const { return std::get< 1>(values_); }
        inline void setParam_2(const bool _value) { std::get< 1>(values_) = _value; }
        inline const int8_t &getParam_3() const { return std::get< 2>(values_); }
        inline void setParam_3(const int8_t &_value) { std::get< 2>(values_) = _value; }
        inline const int16_t &getParam_4() const { return std::get< 3>(values_); }
        inline void setParam_4(const int16_t &_value) { std::get< 3>(values_) = _value; }
        inline const int32_t &getParam_5() const { return std::get< 4>(values_); }
        inline void setParam_5(const int32_t &_value) { std::get< 4>(values_) = _value; }
        inline const int64_t &getParam_6() const { return std::get< 5>(values_); }
        inline void setParam_6(const int64_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getParam_7() const { return std::get< 6>(values_); }
        inline void setParam_7(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint16_t &getParam_8() const { return std::get< 7>(values_); }
        inline void setParam_8(const uint16_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint32_t &getParam_9() const { return std::get< 8>(values_); }
        inline void setParam_9(const uint32_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint64_t &getParam_10() const { return std::get< 9>(values_); }
        inline void setParam_10(const uint64_t &_value) { std::get< 9>(values_) = _value; }
        inline const double &getParam_11() const { return std::get< 10>(values_); }
        inline void setParam_11(const double &_value) { std::get< 10>(values_) = _value; }
        inline const float &getParam_12() const { return std::get< 11>(values_); }
        inline void setParam_12(const float &_value) { std::get< 11>(values_) = _value; }
        inline bool operator==(const AllPrimitiveDataTypes& _other) const {
        return (getParam_1() == _other.getParam_1() && getParam_2() == _other.getParam_2() && getParam_3() == _other.getParam_3() && getParam_4() == _other.getParam_4() && getParam_5() == _other.getParam_5() && getParam_6() == _other.getParam_6() && getParam_7() == _other.getParam_7() && getParam_8() == _other.getParam_8() && getParam_9() == _other.getParam_9() && getParam_10() == _other.getParam_10() && getParam_11() == _other.getParam_11() && getParam_12() == _other.getParam_12());
        }
        inline bool operator!=(const AllPrimitiveDataTypes &_other) const {
            return !((*this) == _other);
        }

    };
};

const char* TestService::getInterface() {
    return ("test.TestService:v0_1");
}

CommonAPI::Version TestService::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace test
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_TEST_TEST_SERVICE_HPP_
